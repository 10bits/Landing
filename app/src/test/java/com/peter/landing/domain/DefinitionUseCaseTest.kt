package com.peter.landing.domain

import com.peter.landing.data.local.note.Note
import com.peter.landing.data.repository.note.NoteRepository
import com.peter.landing.data.repository.word.WordRepository
import com.peter.landing.data.repository.wrong.WrongRepository
import com.peter.landing.debug.expectWord
import com.peter.landing.domain.dict.DefinitionUseCase
import com.peter.landing.util.LandingCoroutineScope
import io.mockk.coEvery
import io.mockk.coVerify
import io.mockk.confirmVerified
import io.mockk.mockk
import kotlinx.coroutines.runBlocking
import org.junit.Assert.*
import org.junit.Test
import org.junit.runner.RunWith
import org.junit.runners.JUnit4

@RunWith(JUnit4::class)
class DefinitionUseCaseTest {

    private val scope = LandingCoroutineScope()
    private val wordRepository = mockk<WordRepository>(relaxed = true)
    private val noteRepository = mockk<NoteRepository>(relaxed = true)
    private val wrongRepository = mockk<WrongRepository>(relaxed = true)
    private val useCase = DefinitionUseCase(
        wordRepository,
        noteRepository,
        wrongRepository
    )

    @Test
    fun `search function no exception`() = runBlocking {

        coEvery {
            wordRepository.searchWord(expectWord.spelling)
        } returns expectWord

        useCase.search(expectWord.spelling, scope)
        val result = useCase.getWord()
        assertNotNull(result)
        assertEquals(expectWord, result)

        coVerify(exactly = 1) {
            wordRepository.searchWord(expectWord.spelling)
        }

        confirmVerified(wordRepository)
    }

    @Test
    fun `search function exception`() = runBlocking {

        // the code generated by room has already taken care the exception
        coEvery {
            wordRepository.searchWord(expectWord.spelling)
        } returns null

        useCase.search(expectWord.spelling, scope)
        val result = useCase.getWord()
        assertNull(result)

        coVerify(exactly = 1) {
            wordRepository.searchWord(expectWord.spelling)
        }

        confirmVerified(wordRepository)
    }

    @Test
    fun isWordNoted() = runBlocking {
        val id: Long = 1

        useCase.isWordNoted(id)

        coVerify(exactly = 1) {
            noteRepository.checkNoteExist(id)
        }

        confirmVerified(noteRepository)
    }

    @Test
    fun addNote() = runBlocking {
        val id: Long = 1

        useCase.addNote(id, scope)

        coVerify(exactly = 1) {
            noteRepository.addNote(Note(id))
            wrongRepository.markWrongNoted(id)
        }

        confirmVerified(noteRepository, wrongRepository)
    }

    @Test
    fun removeNote() = runBlocking {
        val id: Long = 1

        useCase.removeNote(id, scope)

        coVerify(exactly = 1) {
            noteRepository.removeNote(id)
            wrongRepository.unMarkWrongNoted(id)
        }

        confirmVerified(noteRepository, wrongRepository)
    }

}